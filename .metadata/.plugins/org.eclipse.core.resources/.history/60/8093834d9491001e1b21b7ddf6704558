#include "UltraSonic.h"

extern TIM_HandleTypeDef htim1;

// Variables for Ultrasonic sensor 1
uint32_t IC_Val1_CH1 = 0;
uint32_t IC_Val2_CH1 = 0;
uint32_t Difference_CH1 = 0;
uint8_t Is_First_Captured_CH1 = 0; // Flag to check if the first value is captured
uint8_t Distance_CH1 = 0;

// Variables for Ultrasonic sensor 2
uint32_t IC_Val1_CH2 = 0;
uint32_t IC_Val2_CH2 = 0;
uint32_t Difference_CH2 = 0;
uint8_t Is_First_Captured_CH2 = 0;
uint8_t Distance_CH2 = 0;

// Variables for Ultrasonic sensor 3
uint32_t IC_Val1_CH3 = 0;
uint32_t IC_Val2_CH3 = 0;
uint32_t Difference_CH3 = 0;
uint8_t Is_First_Captured_CH3 = 0;
uint8_t Distance_CH3 = 0;

// Variables for Ultrasonic sensor 4
uint32_t IC_Val1_CH4 = 0;
uint32_t IC_Val2_CH4 = 0;
uint32_t Difference_CH4 = 0;
uint8_t Is_First_Captured_CH4 = 0;
uint8_t Distance_CH4 = 0;


static void UltraSonic_void_Init(Ultra_Sonic_Type Ultra_Sonic) {
	//This Function Just for Initiate the Trigger

	//The Trigger is High pusle , 10 ms delay  , then Low Pulse to the Trigger Pin in UltraSonic from our MC.

	switch (Ultra_Sonic) {
	case ULTRASONIC1:
		HAL_GPIO_WritePin(ULTRA_SONIC1_TRIG_PORT, ULTRA_SONIC1_TRIG, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(ULTRA_SONIC1_TRIG_PORT, ULTRA_SONIC1_TRIG, GPIO_PIN_RESET);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
		break;

	case ULTRASONIC2:
		HAL_GPIO_WritePin(ULTRA_SONIC2_TRIG_PORT, ULTRA_SONIC2_TRIG, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(ULTRA_SONIC2_TRIG_PORT, ULTRA_SONIC2_TRIG, GPIO_PIN_RESET);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
		break;

	case ULTRASONIC3:
		HAL_GPIO_WritePin(ULTRA_SONIC3_TRIG_PORT, ULTRA_SONIC3_TRIG, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(ULTRA_SONIC3_TRIG_PORT, ULTRA_SONIC3_TRIG, GPIO_PIN_RESET);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
		break;

	case ULTRASONIC4:
		HAL_GPIO_WritePin(ULTRA_SONIC4_TRIG_PORT, ULTRA_SONIC4_TRIG, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(ULTRA_SONIC4_TRIG_PORT, ULTRA_SONIC4_TRIG, GPIO_PIN_RESET);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
		break;

	case ULTRASONIC1_2:
		HAL_GPIO_WritePin(ULTRA_SONIC1_TRIG_PORT, ULTRA_SONIC1_TRIG, GPIO_PIN_SET);
		HAL_GPIO_WritePin(ULTRA_SONIC2_TRIG_PORT, ULTRA_SONIC2_TRIG, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(ULTRA_SONIC1_TRIG_PORT, ULTRA_SONIC1_TRIG, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(ULTRA_SONIC2_TRIG_PORT, ULTRA_SONIC2_TRIG, GPIO_PIN_RESET);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
		break;

	case TOTAL_ULTRA_SONIC:
		HAL_GPIO_WritePin(ULTRA_SONIC1_TRIG_PORT, ULTRA_SONIC1_TRIG, GPIO_PIN_SET);
		HAL_GPIO_WritePin(ULTRA_SONIC2_TRIG_PORT, ULTRA_SONIC2_TRIG, GPIO_PIN_SET);
		HAL_GPIO_WritePin(ULTRA_SONIC3_TRIG_PORT, ULTRA_SONIC3_TRIG, GPIO_PIN_SET);
		HAL_GPIO_WritePin(ULTRA_SONIC4_TRIG_PORT, ULTRA_SONIC4_TRIG, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(ULTRA_SONIC1_TRIG_PORT, ULTRA_SONIC1_TRIG, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(ULTRA_SONIC2_TRIG_PORT, ULTRA_SONIC2_TRIG, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(ULTRA_SONIC3_TRIG_PORT, ULTRA_SONIC3_TRIG, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(ULTRA_SONIC4_TRIG_PORT, ULTRA_SONIC4_TRIG, GPIO_PIN_RESET);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
		__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
		break;
	}

	// no need
	//__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter

}

Read_Status UltraSonic_ReadStatusENUM_GetRead(Ultra_Sonic_Type Ultra_Sonic,
		uint16_t *distance1, uint16_t *distance2) {

	//Creating ENUM Obj 3lshan nshuf fe READ gat wla la2.
	Read_Status status = NO_READ;

	//Creating u16 Variable 3lshan n5zn feh el time eli rg3 beh el ecko bta3 el ultrasonic.
	//To Calculate the Distance .
	//u32 time_calculated ;

	//3aml Enum 3lshan low 3andy aktr mn UltraSonic Wa7da we a22dr aswitch ana hshtghl 3al eh ka INPUT lel Function.
	//Ultra_Sonic_Type Enum in H file .

	switch (Ultra_Sonic) {
	case ULTRASONIC1:

		//This Function Just for Initiate the Trigger

		UltraSonic_void_Init(ULTRASONIC1);

		//This Function is to Count the Time Between Rising and Failling Edges in 1 Cycle using ICU.

		if (Is_First_Captured_CH1 == 2) {
			*distance1 = Distance_CH1;
			status = READ_EXIST;
			Is_First_Captured_CH1 = 0; // set it back to false
		}

		break;

	case ULTRASONIC2:

		//This Function Just for Initiate the Trigger

		UltraSonic_void_Init(ULTRASONIC2);

		//This Function is to Count the Time Between Rising and Failling Edges in 1 Cycle using ICU.

		if (Is_First_Captured_CH2 == 2) {
			*distance1 = Distance_CH2;
			status = READ_EXIST;
			Is_First_Captured_CH2 = 0; // set it back to false
		}

		break;

	case ULTRASONIC3:

		//This Function Just for Initiate the Trigger

		UltraSonic_void_Init(ULTRASONIC3);

		//This Function is to Count the Time Between Rising and Failling Edges in 1 Cycle using ICU.

		if (Is_First_Captured_CH3 == 2) {
			*distance1 = Distance_CH3;
			status = READ_EXIST;
			Is_First_Captured_CH3 = 0; // set it back to false
		}

		break;

	case ULTRASONIC4:

		//This Function Just for Initiate the Trigger

		UltraSonic_void_Init(ULTRASONIC4);

		//This Function is to Count the Time Between Rising and Failling Edges in 1 Cycle using ICU.

		if (Is_First_Captured_CH4 == 2) {
			*distance1 = Distance_CH4;
			status = READ_EXIST;
			Is_First_Captured_CH4 = 0;
		}
		break;

	case ULTRASONIC1_2:

		//This Function Just for Initiate the Trigger

		UltraSonic_void_Init(ULTRASONIC1_2);

		//This Function is to Count the Time Between Rising and Failling Edges in 1 Cycle using ICU.

		if (Is_First_Captured_CH1 == 2 && Is_First_Captured_CH2 == 2) {
			*distance1 = Distance_CH1;
			*distance2 = Distance_CH2;
			status = READ_EXIST;
			Is_First_Captured_CH1 = 0;
			Is_First_Captured_CH2 = 0;
		}
		break;

	case TOTAL_ULTRA_SONIC:
		UltraSonic_void_Init(TOTAL_ULTRA_SONIC);

		break;
	}

	//Time Between Taking 2 Readings Wra Ba3d.

	//HAL_Delay(TIME_BETWEEN_READINGS_INMILI);

	return status;

}
